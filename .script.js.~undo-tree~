(undo-tree-save-format-version . 1)
"54d0f59f905d0b7de9cc55964cc4466085ab18c7"
[nil current nil nil (26007 24310 873599 933000) 0 nil]
([nil nil ((nil rear-nonsticky nil 284 . 285) (nil fontified nil 244 . 285) (244 . 285) (t 26007 12722 814232 516000)) ((#("const data = require('./employees.json');" 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil) 6 10 (face font-lock-variable-name-face fontified nil) 10 21 (fontified nil) 21 24 (face font-lock-string-face fontified nil) 24 25 (face font-lock-string-face fontified nil) 25 26 (face font-lock-string-face fontified nil) 26 27 (face font-lock-string-face fontified nil) 27 28 (face font-lock-string-face fontified nil) 28 29 (face font-lock-string-face fontified nil) 29 30 (face font-lock-string-face fontified nil) 30 31 (face font-lock-string-face fontified nil) 31 32 (face font-lock-string-face fontified nil) 32 33 (face font-lock-string-face fontified nil) 33 39 (face font-lock-string-face fontified nil) 39 40 (fontified nil) 40 41 (rear-nonsticky nil fontified nil)) . 244) (undo-tree-id552 . -41) (undo-tree-id553 . -34) (undo-tree-id554 . -33) (undo-tree-id555 . -32) (undo-tree-id556 . -31) (undo-tree-id557 . -30) (undo-tree-id558 . -29) (undo-tree-id559 . -28) (undo-tree-id560 . -27) (undo-tree-id561 . -26) (undo-tree-id562 . -25) (undo-tree-id563 . -24) (undo-tree-id564 . -24) (undo-tree-id565 . -24) (undo-tree-id566 . -24) (undo-tree-id567 . -24) (undo-tree-id568 . -24) (undo-tree-id569 . -24) (undo-tree-id570 . -41) (undo-tree-id571 . -41) (undo-tree-id572 . -41) (undo-tree-id573 . -41) (undo-tree-id574 . -41) (undo-tree-id575 . -40) (undo-tree-id576 . -39) (undo-tree-id577 . -38) (undo-tree-id578 . -34) (undo-tree-id579 . -24) (undo-tree-id580 . -24) (undo-tree-id581 . -23) (undo-tree-id582 . -22) (undo-tree-id583 . -21) (undo-tree-id584 . -20) (undo-tree-id585 . -13) (undo-tree-id586 . -11) (undo-tree-id587 . -10) (undo-tree-id588 . -6) (undo-tree-id589 . -5) (undo-tree-id590 . -33) (undo-tree-id591 . -33) (nil rear-nonsticky t 284 . 285)) (26007 24310 835653 818000) 0 nil])
([nil nil ((#("e" 0 1 (face font-lock-string-face fontified t)) . -268) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (#("m" 0 1 (face font-lock-string-face fontified t)) . -269) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (#("p" 0 1 (face font-lock-string-face fontified t)) . -270) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (#("l" 0 1 (face font-lock-string-face fontified t)) . -271) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (#("o" 0 1 (face font-lock-string-face fontified t)) . -272) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (#("y" 0 1 (face font-lock-string-face fontified t)) . -273) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -274) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (#("e" 0 1 (face font-lock-string-face fontified t)) . -275) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("s" 0 1 (face font-lock-string-face fontified t)) . -276) (undo-tree-id294 . -1) (undo-tree-id295 . -1) 277) ((268 . 277)) (26007 24310 794472 877000) 0 nil])
([nil nil ((268 . 270)) ((#("da" 0 2 (face font-lock-string-face fontified t)) . 268) (undo-tree-id543 . -1) (undo-tree-id544 . -2) (undo-tree-id545 . -2) (undo-tree-id546 . -2) (undo-tree-id547 . -2) (undo-tree-id548 . -2) (undo-tree-id549 . -2) (undo-tree-id550 . -2) (undo-tree-id551 . -2)) (26007 24310 753357 706000) 0 nil])
([nil nil ((270 . 272)) ((#("ta" 0 2 (face font-lock-string-face fontified t)) . 270) (undo-tree-id538 . -1) (undo-tree-id539 . -2) (undo-tree-id540 . -2) (undo-tree-id541 . -2) (undo-tree-id542 . -2)) (26007 24310 712376 541000) 0 nil])
([nil nil ((#("const data = require('./data.json');

" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 10 (face font-lock-variable-name-face fontified t) 10 21 (fontified t) 21 34 (face font-lock-string-face fontified t) 34 35 (fontified t) 35 36 (rear-nonsticky t fontified t) 36 37 (fontified t) 37 38 (fontified t)) . 244) (undo-tree-id200 . -38) (undo-tree-id201 . -36) (undo-tree-id202 . -29) (undo-tree-id203 . -24) (undo-tree-id204 . -24) (undo-tree-id205 . -24) (undo-tree-id206 . -24) (undo-tree-id207 . -24) (undo-tree-id208 . -24) (undo-tree-id209 . -24) (undo-tree-id210 . -24) (undo-tree-id211 . -24) (undo-tree-id212 . -24) (undo-tree-id213 . -25) (undo-tree-id214 . -26) (undo-tree-id215 . -27) (undo-tree-id216 . -28) (undo-tree-id217 . -28) (undo-tree-id218 . -28) (undo-tree-id219 . -36) (undo-tree-id220 . -36) (undo-tree-id221 . -36) (undo-tree-id222 . -36) (undo-tree-id223 . -36) (undo-tree-id224 . -38) (undo-tree-id225 . -38) (undo-tree-id226 . -35) (undo-tree-id227 . -34) (undo-tree-id228 . -33) (undo-tree-id229 . -29) (undo-tree-id230 . -28) (undo-tree-id231 . -24) (undo-tree-id232 . -23) (undo-tree-id233 . -22) (undo-tree-id234 . -21) (undo-tree-id235 . -20) (undo-tree-id236 . -13) (undo-tree-id237 . -11) (undo-tree-id238 . -10) (undo-tree-id239 . -6) (undo-tree-id240 . -5) (undo-tree-id241 . -38) (t 26007 24148 741080 167000)) ((244 . 282)) (26007 24310 676879 407000) 0 nil])
([nil nil ((244 . 282)) ((#("const data = require('./data.json');

" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 10 (face font-lock-variable-name-face fontified t) 10 21 (fontified t) 21 26 (face font-lock-string-face fontified t) 26 28 (face font-lock-string-face fontified t) 28 34 (face font-lock-string-face fontified t) 34 35 (fontified t) 35 36 (rear-nonsticky t fontified t) 36 37 (fontified t) 37 38 (fontified t)) . 244) (undo-tree-id447 . -36) (undo-tree-id448 . -29) (undo-tree-id449 . -24) (undo-tree-id450 . -24) (undo-tree-id451 . -24) (undo-tree-id452 . -24) (undo-tree-id453 . -24) (undo-tree-id454 . -24) (undo-tree-id455 . -24) (undo-tree-id456 . -24) (undo-tree-id457 . -24) (undo-tree-id458 . -24) (undo-tree-id459 . -25) (undo-tree-id460 . -26) (undo-tree-id461 . -27) (undo-tree-id462 . -28) (undo-tree-id463 . -28) (undo-tree-id464 . -28) (undo-tree-id465 . -36) (undo-tree-id466 . -36) (undo-tree-id467 . -36) (undo-tree-id468 . -36) (undo-tree-id469 . -36) (undo-tree-id470 . -38) (undo-tree-id471 . -38) (undo-tree-id472 . -35) (undo-tree-id473 . -34) (undo-tree-id474 . -33) (undo-tree-id475 . -29) (undo-tree-id476 . -28) (undo-tree-id477 . -24) (undo-tree-id478 . -23) (undo-tree-id479 . -22) (undo-tree-id480 . -21) (undo-tree-id481 . -20) (undo-tree-id482 . -13) (undo-tree-id483 . -11) (undo-tree-id484 . -10) (undo-tree-id485 . -6) (undo-tree-id486 . -5) (undo-tree-id487 . -38) (undo-tree-id488 . -26) (undo-tree-id489 . -26) (undo-tree-id490 . -26) (undo-tree-id491 . -29) (undo-tree-id492 . -30) (undo-tree-id493 . -31) (undo-tree-id494 . -32) (undo-tree-id495 . -33) (undo-tree-id496 . -34) (undo-tree-id497 . -35) (undo-tree-id498 . -36) (undo-tree-id499 . -38) (undo-tree-id500 . -35) (undo-tree-id501 . -35) (undo-tree-id502 . -34) (undo-tree-id503 . -33) (undo-tree-id504 . -32) (undo-tree-id505 . -31) (undo-tree-id506 . -30) (undo-tree-id507 . -29) (undo-tree-id508 . -26) (undo-tree-id509 . -26) (undo-tree-id510 . -26) (undo-tree-id511 . -25) (undo-tree-id512 . -24) (undo-tree-id513 . -23) (undo-tree-id514 . -22) (undo-tree-id515 . -21) (undo-tree-id516 . -20) (undo-tree-id517 . -19) (undo-tree-id518 . -18) (undo-tree-id519 . -17) (undo-tree-id520 . -16) (undo-tree-id521 . -15) (undo-tree-id522 . -14) (undo-tree-id523 . -13) (undo-tree-id524 . -12) (undo-tree-id525 . -11) (undo-tree-id526 . -10) (undo-tree-id527 . -9) (undo-tree-id528 . -8) (undo-tree-id529 . -7) (undo-tree-id530 . -6) (undo-tree-id531 . -5) (undo-tree-id532 . -4) (undo-tree-id533 . -3) (undo-tree-id534 . -2) (undo-tree-id535 . -1) (undo-tree-id536 . -26) (undo-tree-id537 . -26)) (26007 24310 636297 786000) 0 nil])
([nil nil ((#("ta" 0 2 (face font-lock-string-face fontified t)) . 270) (undo-tree-id195 . -1) (undo-tree-id196 . -2) (undo-tree-id197 . -2) (undo-tree-id198 . -2) (undo-tree-id199 . -2) (t 26007 24148 741080 167000)) ((270 . 272)) (26007 24310 592343 303000) 0 nil])
([nil nil ((270 . 272)) ((#("ta" 0 2 (face font-lock-string-face fontified t)) . 270) (undo-tree-id443 . -1) (undo-tree-id444 . -2) (undo-tree-id445 . -2) (undo-tree-id446 . -1)) (26007 24310 552568 710000) 0 nil])
([nil nil ((#("const data = require('./data.json');" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 10 (face font-lock-variable-name-face fontified t) 10 21 (fontified t) 21 34 (face font-lock-string-face fontified t) 34 35 (fontified t) 35 36 (rear-nonsticky t fontified t)) . 244) (undo-tree-id109 . -36) (undo-tree-id110 . -36) (undo-tree-id111 . -29) (undo-tree-id112 . -24) (undo-tree-id113 . -24) (undo-tree-id114 . -24) (undo-tree-id115 . -24) (undo-tree-id116 . -24) (undo-tree-id117 . -24) (undo-tree-id118 . -24) (undo-tree-id119 . -24) (undo-tree-id120 . -24) (undo-tree-id121 . -24) (undo-tree-id122 . -25) (undo-tree-id123 . -26) (undo-tree-id124 . -26) (undo-tree-id125 . -26) (undo-tree-id126 . -26) (undo-tree-id127 . -26) (undo-tree-id128 . -36) (undo-tree-id129 . -36) (undo-tree-id130 . -36) (undo-tree-id131 . -36) (undo-tree-id132 . -36) (undo-tree-id133 . -35) (undo-tree-id134 . -34) (undo-tree-id135 . -33) (undo-tree-id136 . -29) (undo-tree-id137 . -26) (undo-tree-id138 . -24) (undo-tree-id139 . -23) (undo-tree-id140 . -22) (undo-tree-id141 . -21) (undo-tree-id142 . -20) (undo-tree-id143 . -13) (undo-tree-id144 . -11) (undo-tree-id145 . -10) (undo-tree-id146 . -6) (undo-tree-id147 . -5) (undo-tree-id148 . -26) (undo-tree-id149 . -27) (undo-tree-id150 . -28) (undo-tree-id151 . -29) (undo-tree-id152 . -30) (undo-tree-id153 . -31) (undo-tree-id154 . -32) (undo-tree-id155 . -33) (undo-tree-id156 . -34) (undo-tree-id157 . -35) (undo-tree-id158 . -36) (undo-tree-id159 . -35) (undo-tree-id160 . -35) (undo-tree-id161 . -34) (undo-tree-id162 . -33) (undo-tree-id163 . -32) (undo-tree-id164 . -31) (undo-tree-id165 . -30) (undo-tree-id166 . -29) (undo-tree-id167 . -28) (undo-tree-id168 . -27) (undo-tree-id169 . -26) (undo-tree-id170 . -25) (undo-tree-id171 . -24) (undo-tree-id172 . -23) (undo-tree-id173 . -22) (undo-tree-id174 . -21) (undo-tree-id175 . -20) (undo-tree-id176 . -19) (undo-tree-id177 . -18) (undo-tree-id178 . -17) (undo-tree-id179 . -16) (undo-tree-id180 . -15) (undo-tree-id181 . -14) (undo-tree-id182 . -13) (undo-tree-id183 . -12) (undo-tree-id184 . -11) (undo-tree-id185 . -10) (undo-tree-id186 . -9) (undo-tree-id187 . -8) (undo-tree-id188 . -7) (undo-tree-id189 . -6) (undo-tree-id190 . -5) (undo-tree-id191 . -4) (undo-tree-id192 . -3) (undo-tree-id193 . -2) (undo-tree-id194 . -1)) ((244 . 280)) (26007 24310 515302 362000) 0 nil])
([nil nil ((148 . 150)) ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 148) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -2) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1)) (26007 24310 474805 732000) 0 nil])
([nil nil ((nil fontified nil 184 . 185) (nil fontified nil 183 . 184) (nil fontified nil 170 . 183) (nil fontified nil 159 . 170) (nil fontified nil 155 . 159) (nil fontified nil 154 . 155) (nil fontified nil 149 . 154) (149 . 185)) ((#("const data = require('./data.json');" 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil) 6 10 (face font-lock-variable-name-face fontified nil) 10 21 (fontified nil) 21 34 (face font-lock-string-face fontified nil) 34 35 (fontified nil) 35 36 (fontified nil rear-nonsticky t)) . 149) (undo-tree-id431 . -36) (undo-tree-id432 . -36) (undo-tree-id433 . -36) (nil fontified t 184 . 185) (t 26007 24170 982028 342000)) (26007 24310 432575 409000) 0 nil])
([nil nil ((#("const data = require('./data.json');" 0 5 (face font-lock-keyword-face fontified nil) 5 6 (fontified nil) 6 10 (face font-lock-variable-name-face fontified nil) 10 21 (fontified nil) 21 34 (face font-lock-string-face fontified nil) 34 35 (fontified nil) 35 36 (fontified nil rear-nonsticky t)) . 149) (undo-tree-id105 . -36) (undo-tree-id106 . -36) (undo-tree-id107 . -36) (undo-tree-id108 . -36) (nil fontified t 184 . 185) (t 26007 24170 982028 342000)) ((nil fontified nil 184 . 185) (149 . 185)) (26007 24310 395921 829000) 0 nil])
([nil nil ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . 148) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -2) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1)) ((148 . 150)) (26007 24310 352579 31000) 0 nil])
([nil nil ((244 . 280)) ((#("const data = require('./data.json');" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 10 (face font-lock-variable-name-face fontified t) 10 21 (fontified t) 21 26 (face font-lock-string-face fontified t) 26 28 (face font-lock-string-face fontified t) 28 34 (face font-lock-string-face fontified t) 34 35 (fontified t) 35 36 (fontified t rear-nonsticky t)) . 244) (undo-tree-id342 . -36) (undo-tree-id343 . -29) (undo-tree-id344 . -24) (undo-tree-id345 . -24) (undo-tree-id346 . -24) (undo-tree-id347 . -24) (undo-tree-id348 . -24) (undo-tree-id349 . -24) (undo-tree-id350 . -24) (undo-tree-id351 . -24) (undo-tree-id352 . -24) (undo-tree-id353 . -24) (undo-tree-id354 . -25) (undo-tree-id355 . -26) (undo-tree-id356 . -26) (undo-tree-id357 . -26) (undo-tree-id358 . -26) (undo-tree-id359 . -26) (undo-tree-id360 . -36) (undo-tree-id361 . -36) (undo-tree-id362 . -36) (undo-tree-id363 . -36) (undo-tree-id364 . -36) (undo-tree-id365 . -35) (undo-tree-id366 . -34) (undo-tree-id367 . -33) (undo-tree-id368 . -29) (undo-tree-id369 . -26) (undo-tree-id370 . -24) (undo-tree-id371 . -23) (undo-tree-id372 . -22) (undo-tree-id373 . -21) (undo-tree-id374 . -20) (undo-tree-id375 . -13) (undo-tree-id376 . -11) (undo-tree-id377 . -10) (undo-tree-id378 . -6) (undo-tree-id379 . -5) (undo-tree-id380 . -26) (undo-tree-id381 . -27) (undo-tree-id382 . -28) (undo-tree-id383 . -29) (undo-tree-id384 . -30) (undo-tree-id385 . -31) (undo-tree-id386 . -32) (undo-tree-id387 . -33) (undo-tree-id388 . -34) (undo-tree-id389 . -35) (undo-tree-id390 . -36) (undo-tree-id391 . -35) (undo-tree-id392 . -35) (undo-tree-id393 . -34) (undo-tree-id394 . -33) (undo-tree-id395 . -32) (undo-tree-id396 . -31) (undo-tree-id397 . -30) (undo-tree-id398 . -29) (undo-tree-id399 . -28) (undo-tree-id400 . -27) (undo-tree-id401 . -26) (undo-tree-id402 . -25) (undo-tree-id403 . -24) (undo-tree-id404 . -23) (undo-tree-id405 . -22) (undo-tree-id406 . -21) (undo-tree-id407 . -20) (undo-tree-id408 . -19) (undo-tree-id409 . -18) (undo-tree-id410 . -17) (undo-tree-id411 . -16) (undo-tree-id412 . -15) (undo-tree-id413 . -14) (undo-tree-id414 . -13) (undo-tree-id415 . -12) (undo-tree-id416 . -11) (undo-tree-id417 . -10) (undo-tree-id418 . -9) (undo-tree-id419 . -8) (undo-tree-id420 . -7) (undo-tree-id421 . -6) (undo-tree-id422 . -5) (undo-tree-id423 . -4) (undo-tree-id424 . -3) (undo-tree-id425 . -2) (undo-tree-id426 . -1) (undo-tree-id427 . -26) (undo-tree-id428 . -26) (undo-tree-id429 . -26) (undo-tree-id430 . -26)) (26007 24310 310566 402000) 0 nil])
([nil nil ((#("ta" 0 2 (face font-lock-string-face fontified t)) . 270) (undo-tree-id92 . -1) (undo-tree-id93 . -2) (undo-tree-id94 . -2) (undo-tree-id95 . -1)) ((270 . 272)) (26007 24310 275556 129000) 0 nil])
([nil nil ((270 . 272)) ((#("ta" 0 2 (face font-lock-string-face fontified t)) . 270) (undo-tree-id337 . -1) (undo-tree-id338 . -2) (undo-tree-id339 . -2) (undo-tree-id340 . -2) (undo-tree-id341 . -2)) (26007 24310 235817 117000) 0 nil])
([nil nil ((#("const data = require('./data.json');

" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 10 (face font-lock-variable-name-face fontified t) 10 21 (fontified t) 21 26 (face font-lock-string-face fontified t) 26 28 (face font-lock-string-face fontified t) 28 34 (face font-lock-string-face fontified t) 34 35 (fontified t) 35 36 (fontified t rear-nonsticky t) 36 37 (fontified t) 37 38 (fontified t)) . 244) (undo-tree-id0 . -26) (undo-tree-id1 . -36) (undo-tree-id2 . -29) (undo-tree-id3 . -24) (undo-tree-id4 . -24) (undo-tree-id5 . -24) (undo-tree-id6 . -24) (undo-tree-id7 . -24) (undo-tree-id8 . -24) (undo-tree-id9 . -24) (undo-tree-id10 . -24) (undo-tree-id11 . -24) (undo-tree-id12 . -24) (undo-tree-id13 . -25) (undo-tree-id14 . -26) (undo-tree-id15 . -27) (undo-tree-id16 . -28) (undo-tree-id17 . -28) (undo-tree-id18 . -28) (undo-tree-id19 . -36) (undo-tree-id20 . -36) (undo-tree-id21 . -36) (undo-tree-id22 . -36) (undo-tree-id23 . -36) (undo-tree-id24 . -38) (undo-tree-id25 . -38) (undo-tree-id26 . -35) (undo-tree-id27 . -34) (undo-tree-id28 . -33) (undo-tree-id29 . -29) (undo-tree-id30 . -28) (undo-tree-id31 . -24) (undo-tree-id32 . -23) (undo-tree-id33 . -22) (undo-tree-id34 . -21) (undo-tree-id35 . -20) (undo-tree-id36 . -13) (undo-tree-id37 . -11) (undo-tree-id38 . -10) (undo-tree-id39 . -6) (undo-tree-id40 . -5) (undo-tree-id41 . -38) (undo-tree-id42 . -26) (undo-tree-id43 . -26) (undo-tree-id44 . -26) (undo-tree-id45 . -29) (undo-tree-id46 . -30) (undo-tree-id47 . -31) (undo-tree-id48 . -32) (undo-tree-id49 . -33) (undo-tree-id50 . -34) (undo-tree-id51 . -35) (undo-tree-id52 . -36) (undo-tree-id53 . -38) (undo-tree-id54 . -35) (undo-tree-id55 . -35) (undo-tree-id56 . -34) (undo-tree-id57 . -33) (undo-tree-id58 . -32) (undo-tree-id59 . -31) (undo-tree-id60 . -30) (undo-tree-id61 . -29) (undo-tree-id62 . -26) (undo-tree-id63 . -26) (undo-tree-id64 . -26) (undo-tree-id65 . -25) (undo-tree-id66 . -24) (undo-tree-id67 . -23) (undo-tree-id68 . -22) (undo-tree-id69 . -21) (undo-tree-id70 . -20) (undo-tree-id71 . -19) (undo-tree-id72 . -18) (undo-tree-id73 . -17) (undo-tree-id74 . -16) (undo-tree-id75 . -15) (undo-tree-id76 . -14) (undo-tree-id77 . -13) (undo-tree-id78 . -12) (undo-tree-id79 . -11) (undo-tree-id80 . -10) (undo-tree-id81 . -9) (undo-tree-id82 . -8) (undo-tree-id83 . -7) (undo-tree-id84 . -6) (undo-tree-id85 . -5) (undo-tree-id86 . -4) (undo-tree-id87 . -3) (undo-tree-id88 . -2) (undo-tree-id89 . -1) (undo-tree-id90 . -26) (undo-tree-id91 . -26)) ((244 . 282)) (26007 24309 632087 338000) 0 nil])
([nil nil ((244 . 282)) ((#("const data = require('./data.json');

" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 10 (face font-lock-variable-name-face fontified t) 10 21 (fontified t) 21 34 (face font-lock-string-face fontified t) 34 35 (fontified t) 35 36 (rear-nonsticky t fontified t) 36 37 (fontified t) 37 38 (fontified t)) . 244) (undo-tree-id296 . -36) (undo-tree-id297 . -29) (undo-tree-id298 . -24) (undo-tree-id299 . -24) (undo-tree-id300 . -24) (undo-tree-id301 . -24) (undo-tree-id302 . -24) (undo-tree-id303 . -24) (undo-tree-id304 . -24) (undo-tree-id305 . -24) (undo-tree-id306 . -24) (undo-tree-id307 . -24) (undo-tree-id308 . -25) (undo-tree-id309 . -26) (undo-tree-id310 . -27) (undo-tree-id311 . -28) (undo-tree-id312 . -28) (undo-tree-id313 . -28) (undo-tree-id314 . -36) (undo-tree-id315 . -36) (undo-tree-id316 . -36) (undo-tree-id317 . -36) (undo-tree-id318 . -36) (undo-tree-id319 . -38) (undo-tree-id320 . -38) (undo-tree-id321 . -35) (undo-tree-id322 . -34) (undo-tree-id323 . -33) (undo-tree-id324 . -29) (undo-tree-id325 . -28) (undo-tree-id326 . -24) (undo-tree-id327 . -23) (undo-tree-id328 . -22) (undo-tree-id329 . -21) (undo-tree-id330 . -20) (undo-tree-id331 . -13) (undo-tree-id332 . -11) (undo-tree-id333 . -10) (undo-tree-id334 . -6) (undo-tree-id335 . -5) (undo-tree-id336 . -38)) (26007 24309 259477 481000) 0 nil])
nil
